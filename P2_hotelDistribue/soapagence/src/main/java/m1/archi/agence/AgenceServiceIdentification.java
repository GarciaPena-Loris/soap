
package m1.archi.agence;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "AgenceServiceIdentification", targetNamespace = "http://service.archi.m1/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface AgenceServiceIdentification {


    /**
     * 
     * @param arg0
     * @return
     *     returns java.lang.String
     * @throws HotelNotFoundExceptionException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "afficherHotelSimple", targetNamespace = "http://service.archi.m1/", className = "m1.archi.agence.AfficherHotelSimple")
    @ResponseWrapper(localName = "afficherHotelSimpleResponse", targetNamespace = "http://service.archi.m1/", className = "m1.archi.agence.AfficherHotelSimpleResponse")
    @Action(input = "http://service.archi.m1/AgenceServiceIdentification/afficherHotelSimpleRequest", output = "http://service.archi.m1/AgenceServiceIdentification/afficherHotelSimpleResponse", fault = {
        @FaultAction(className = HotelNotFoundExceptionException.class, value = "http://service.archi.m1/AgenceServiceIdentification/afficherHotelSimple/Fault/HotelNotFoundException_Exception")
    })
    public String afficherHotelSimple(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws HotelNotFoundExceptionException
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<m1.archi.agence.Hotel>
     * @throws AgenceNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getListeHotelsPartenaire", targetNamespace = "http://service.archi.m1/", className = "m1.archi.agence.GetListeHotelsPartenaire")
    @ResponseWrapper(localName = "getListeHotelsPartenaireResponse", targetNamespace = "http://service.archi.m1/", className = "m1.archi.agence.GetListeHotelsPartenaireResponse")
    @Action(input = "http://service.archi.m1/AgenceServiceIdentification/getListeHotelsPartenaireRequest", output = "http://service.archi.m1/AgenceServiceIdentification/getListeHotelsPartenaireResponse", fault = {
        @FaultAction(className = AgenceNotFoundException_Exception.class, value = "http://service.archi.m1/AgenceServiceIdentification/getListeHotelsPartenaire/Fault/AgenceNotFoundException")
    })
    public List<Hotel> getListeHotelsPartenaire(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws AgenceNotFoundException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.lang.String
     * @throws HotelNotFoundExceptionException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "afficherReservationsHotel", targetNamespace = "http://service.archi.m1/", className = "m1.archi.agence.AfficherReservationsHotel")
    @ResponseWrapper(localName = "afficherReservationsHotelResponse", targetNamespace = "http://service.archi.m1/", className = "m1.archi.agence.AfficherReservationsHotelResponse")
    @Action(input = "http://service.archi.m1/AgenceServiceIdentification/afficherReservationsHotelRequest", output = "http://service.archi.m1/AgenceServiceIdentification/afficherReservationsHotelResponse", fault = {
        @FaultAction(className = HotelNotFoundExceptionException.class, value = "http://service.archi.m1/AgenceServiceIdentification/afficherReservationsHotel/Fault/HotelNotFoundException_Exception")
    })
    public String afficherReservationsHotel(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws HotelNotFoundExceptionException
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     * @throws AgenceNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteAgence", targetNamespace = "http://service.archi.m1/", className = "m1.archi.agence.DeleteAgence")
    @ResponseWrapper(localName = "deleteAgenceResponse", targetNamespace = "http://service.archi.m1/", className = "m1.archi.agence.DeleteAgenceResponse")
    @Action(input = "http://service.archi.m1/AgenceServiceIdentification/deleteAgenceRequest", output = "http://service.archi.m1/AgenceServiceIdentification/deleteAgenceResponse", fault = {
        @FaultAction(className = AgenceNotFoundException_Exception.class, value = "http://service.archi.m1/AgenceServiceIdentification/deleteAgence/Fault/AgenceNotFoundException")
    })
    public boolean deleteAgence(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws AgenceNotFoundException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns m1.archi.agence.Agence
     * @throws AgenceNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAgence", targetNamespace = "http://service.archi.m1/", className = "m1.archi.agence.GetAgence")
    @ResponseWrapper(localName = "getAgenceResponse", targetNamespace = "http://service.archi.m1/", className = "m1.archi.agence.GetAgenceResponse")
    @Action(input = "http://service.archi.m1/AgenceServiceIdentification/getAgenceRequest", output = "http://service.archi.m1/AgenceServiceIdentification/getAgenceResponse", fault = {
        @FaultAction(className = AgenceNotFoundException_Exception.class, value = "http://service.archi.m1/AgenceServiceIdentification/getAgence/Fault/AgenceNotFoundException")
    })
    public Agence getAgence(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws AgenceNotFoundException_Exception
    ;

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getListeAgence", targetNamespace = "http://service.archi.m1/", className = "m1.archi.agence.GetListeAgence")
    @ResponseWrapper(localName = "getListeAgenceResponse", targetNamespace = "http://service.archi.m1/", className = "m1.archi.agence.GetListeAgenceResponse")
    @Action(input = "http://service.archi.m1/AgenceServiceIdentification/getListeAgenceRequest", output = "http://service.archi.m1/AgenceServiceIdentification/getListeAgenceResponse")
    public List<String> getListeAgence();

    /**
     * 
     * @param arg0
     * @return
     *     returns java.lang.String
     * @throws AgenceNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "afficherAgence", targetNamespace = "http://service.archi.m1/", className = "m1.archi.agence.AfficherAgence")
    @ResponseWrapper(localName = "afficherAgenceResponse", targetNamespace = "http://service.archi.m1/", className = "m1.archi.agence.AfficherAgenceResponse")
    @Action(input = "http://service.archi.m1/AgenceServiceIdentification/afficherAgenceRequest", output = "http://service.archi.m1/AgenceServiceIdentification/afficherAgenceResponse", fault = {
        @FaultAction(className = AgenceNotFoundException_Exception.class, value = "http://service.archi.m1/AgenceServiceIdentification/afficherAgence/Fault/AgenceNotFoundException")
    })
    public String afficherAgence(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws AgenceNotFoundException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.lang.String
     * @throws HotelNotFoundExceptionException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "afficherHotel", targetNamespace = "http://service.archi.m1/", className = "m1.archi.agence.AfficherHotel")
    @ResponseWrapper(localName = "afficherHotelResponse", targetNamespace = "http://service.archi.m1/", className = "m1.archi.agence.AfficherHotelResponse")
    @Action(input = "http://service.archi.m1/AgenceServiceIdentification/afficherHotelRequest", output = "http://service.archi.m1/AgenceServiceIdentification/afficherHotelResponse", fault = {
        @FaultAction(className = HotelNotFoundExceptionException.class, value = "http://service.archi.m1/AgenceServiceIdentification/afficherHotel/Fault/HotelNotFoundException_Exception")
    })
    public String afficherHotel(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws HotelNotFoundExceptionException
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns m1.archi.agence.Hotel
     * @throws HotelNotFoundExceptionException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getHotel", targetNamespace = "http://service.archi.m1/", className = "m1.archi.agence.GetHotel")
    @ResponseWrapper(localName = "getHotelResponse", targetNamespace = "http://service.archi.m1/", className = "m1.archi.agence.GetHotelResponse")
    @Action(input = "http://service.archi.m1/AgenceServiceIdentification/getHotelRequest", output = "http://service.archi.m1/AgenceServiceIdentification/getHotelResponse", fault = {
        @FaultAction(className = HotelNotFoundExceptionException.class, value = "http://service.archi.m1/AgenceServiceIdentification/getHotel/Fault/HotelNotFoundException_Exception")
    })
    public Hotel getHotel(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws HotelNotFoundExceptionException
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws AgenceNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getListeIdentifiantHotelsPartenaire", targetNamespace = "http://service.archi.m1/", className = "m1.archi.agence.GetListeIdentifiantHotelsPartenaire")
    @ResponseWrapper(localName = "getListeIdentifiantHotelsPartenaireResponse", targetNamespace = "http://service.archi.m1/", className = "m1.archi.agence.GetListeIdentifiantHotelsPartenaireResponse")
    @Action(input = "http://service.archi.m1/AgenceServiceIdentification/getListeIdentifiantHotelsPartenaireRequest", output = "http://service.archi.m1/AgenceServiceIdentification/getListeIdentifiantHotelsPartenaireResponse", fault = {
        @FaultAction(className = AgenceNotFoundException_Exception.class, value = "http://service.archi.m1/AgenceServiceIdentification/getListeIdentifiantHotelsPartenaire/Fault/AgenceNotFoundException")
    })
    public List<String> getListeIdentifiantHotelsPartenaire(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0)
        throws AgenceNotFoundException_Exception
    ;

}
